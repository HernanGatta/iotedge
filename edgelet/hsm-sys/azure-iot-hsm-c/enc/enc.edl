/* Copyright (c) Microsoft Corporation. All rights reserved. */
/* Licensed under the MIT License. */

enclave {
  from "openenclave/stdio.edl" import *;

    trusted {
      //
      // Symmetric Key Functions
      //

      public int ecall_CreateEncryptionKey(
        [in, string] const char* key_file);

      public int ecall_VerifyEncryptionKey(
        [in, string] const char* key_file);

      public int ecall_DeleteEncryptionKey(
        [in, string] const char* key_file);

      public int ecall_Encrypt(
        [in, string] const char* key_file,
        [in, size=plaintext_len] const unsigned char* plaintext,
        size_t plaintext_len,
        [in, size=aad_len] const unsigned char* aad,
        size_t aad_len,
        [in, size=iv_len] const unsigned char* iv,
        size_t iv_len,
        [out, size=output_buffer_size] unsigned char* output_buffer,
        size_t output_buffer_size);

      public int ecall_Decrypt(
        [in, string] const char* key_file,
        [in, size=ciphertext_buffer_size] const unsigned char* ciphertext_buffer,
        size_t ciphertext_buffer_size,
        [in, size=aad_len] const unsigned char* aad,
        size_t aad_len,
        [in, size=iv_len] const unsigned char* iv,
        size_t iv_len,
        [out, size=output_buffer_size] unsigned char* output_buffer,
        size_t output_buffer_size);

      //
      // SAS Key Functions
      //

      public int ecall_ImportSasKey(
        [in, string] const char* key_file,
        [in, size=key_size] const unsigned char* key,
        size_t key_size);

      public int ecall_VerifySasKey(
        [in, string] const char* key_file);

      public int ecall_DeleteSasKey(
        [in, string] const char* key_file);

      public int ecall_Sign(
        [in, string] const char* key_file,
        [in, size=data_to_be_signed_size] const unsigned char* data_to_be_signed,
        size_t data_to_be_signed_size,
        [out, size=digest_size] unsigned char* digest,
        size_t digest_size);

      public int ecall_DeriveAndSign(
        [in, string] const char* key_file,
        [in, size=identity_size] const unsigned char* identity,
        size_t identity_size,
        [in, size=data_to_be_signed_size] const unsigned char* data_to_be_signed,
        size_t data_to_be_signed_size,
        [out, size=digest_size] unsigned char* digest,
        size_t digest_size);
    };
};
