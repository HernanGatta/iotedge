/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_ENC_U_H
#define EDGER8R_ENC_U_H

#include <openenclave/host.h>
#include "enc_args.h"

OE_EXTERNC_BEGIN

oe_result_t oe_create_enc_enclave(const char* path,
                                 oe_enclave_type_t type,
                                 uint32_t flags,
                                 const void* config,
                                 uint32_t config_size,
                                 oe_enclave_t** enclave);

/* List of ecalls */

oe_result_t ecall_TaCreateMasterEncryptionKey(
        oe_enclave_t* enclave,
        int* _retval);
oe_result_t ecall_TaDestroyMasterEncryptionKey(
        oe_enclave_t* enclave,
        int* _retval);
oe_result_t ecall_TaGetRandomBytes(
        oe_enclave_t* enclave,
        int* _retval,
        unsigned char* buffer,
        size_t buffer_size);
oe_result_t ecall_TaEncryptData(
        oe_enclave_t* enclave,
        int* _retval,
        const unsigned char* plaintext,
        size_t plaintext_len,
        const unsigned char* aad,
        size_t aad_len,
        const unsigned char* iv,
        size_t iv_len,
        unsigned char* output_buffer,
        size_t output_buffer_size);
oe_result_t ecall_TaDecryptData(
        oe_enclave_t* enclave,
        int* _retval,
        const unsigned char* ciphertext_buffer,
        size_t ciphertext_buffer_size,
        const unsigned char* aad,
        size_t aad_len,
        const unsigned char* iv,
        size_t iv_len,
        unsigned char* output_buffer,
        size_t output_buffer_size);
oe_result_t ecall_TaSetSigningKey(
        oe_enclave_t* enclave,
        int* _retval,
        const unsigned char* key,
        size_t key_len);
oe_result_t ecall_TaSignData(
        oe_enclave_t* enclave,
        int* _retval,
        const unsigned char* data_to_be_signed,
        size_t data_to_be_signed_size,
        unsigned char* digest,
        size_t digest_size);
oe_result_t ecall_TaDeriveAndSignData(
        oe_enclave_t* enclave,
        int* _retval,
        const unsigned char* identity,
        size_t identity_size,
        const unsigned char* data_to_be_signed,
        size_t data_to_be_signed_size,
        unsigned char* digest,
        size_t digest_size);
oe_result_t ecall_InitializeStdio(
        oe_enclave_t* enclave);

/* List of ocalls */

int ocall_mkdir(const char* dirname);
GetUntrustedFileSize_Result ocall_GetUntrustedFileSize(const char* filename);
GetUntrustedFileContent_Result ocall_GetUntrustedFileContent(const char* location,
        size_t len);
unsigned int ocall_ExportFile(const char* filename,
        unsigned int appendToExistingFile,
        const void* content,
        size_t len);
oe_result_t ocall_ExportPublicCertificate(const char* location,
        const void* ptr,
        size_t len);
int ocall_stat64i32(const char* path,
        struct ocall_struct_stat64i32* buf);
int ocall_remove(const char* filename);
FindFirstUntrustedFile_Result ocall_opendir(const char* filePathWithWildcards,
        uint32_t matchingFileNameSize);
ocall_struct_dirent ocall_readdir(uintptr_t findNextHandle,
        uint32_t matchingFileNameSize);
oe_result_t ocall_closedir(uintptr_t findNextHandle);

OE_EXTERNC_END

#endif // EDGER8R_ENC_U_H
