/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_ENC_T_H
#define EDGER8R_ENC_T_H

#include <openenclave/enclave.h>
#include "enc_args.h"

OE_EXTERNC_BEGIN

/* List of ecalls */

int ecall_TaCreateMasterEncryptionKey(void);
int ecall_TaDestroyMasterEncryptionKey(void);
int ecall_TaGetRandomBytes(unsigned char* buffer,
        size_t buffer_size);
int ecall_TaEncryptData(const unsigned char* plaintext,
        size_t plaintext_len,
        const unsigned char* aad,
        size_t aad_len,
        const unsigned char* iv,
        size_t iv_len,
        unsigned char* output_buffer,
        size_t output_buffer_size);
int ecall_TaDecryptData(const unsigned char* ciphertext_buffer,
        size_t ciphertext_buffer_size,
        const unsigned char* aad,
        size_t aad_len,
        const unsigned char* iv,
        size_t iv_len,
        unsigned char* output_buffer,
        size_t output_buffer_size);
int ecall_TaSetSigningKey(const unsigned char* key,
        size_t key_len);
int ecall_TaSignData(const unsigned char* data_to_be_signed,
        size_t data_to_be_signed_size,
        unsigned char* digest,
        size_t digest_size);
int ecall_TaDeriveAndSignData(const unsigned char* identity,
        size_t identity_size,
        const unsigned char* data_to_be_signed,
        size_t data_to_be_signed_size,
        unsigned char* digest,
        size_t digest_size);
void ecall_InitializeStdio(void);

/* List of ocalls */

oe_result_t ocall_mkdir(
        int* _retval,
        const char* dirname);
oe_result_t ocall_GetUntrustedFileSize(
        GetUntrustedFileSize_Result* _retval,
        const char* filename);
oe_result_t ocall_GetUntrustedFileContent(
        GetUntrustedFileContent_Result* _retval,
        const char* location,
        size_t len);
oe_result_t ocall_ExportFile(
        unsigned int* _retval,
        const char* filename,
        unsigned int appendToExistingFile,
        const void* content,
        size_t len);
oe_result_t ocall_ExportPublicCertificate(
        oe_result_t* _retval,
        const char* location,
        const void* ptr,
        size_t len);
oe_result_t ocall_stat64i32(
        int* _retval,
        const char* path,
        struct ocall_struct_stat64i32* buf);
oe_result_t ocall_remove(
        int* _retval,
        const char* filename);
oe_result_t ocall_opendir(
        FindFirstUntrustedFile_Result* _retval,
        const char* filePathWithWildcards,
        uint32_t matchingFileNameSize);
oe_result_t ocall_readdir(
        ocall_struct_dirent* _retval,
        uintptr_t findNextHandle,
        uint32_t matchingFileNameSize);
oe_result_t ocall_closedir(
        oe_result_t* _retval,
        uintptr_t findNextHandle);

OE_EXTERNC_END

#endif // EDGER8R_ENC_T_H
